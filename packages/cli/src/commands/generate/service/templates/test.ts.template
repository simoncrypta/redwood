import { ${pluralCamelName}<% if (crud) { %>,${singularCamelName}, create${singularPascalName}, update${singularPascalName}, delete${singularPascalName}<% } %> } from './${pluralCamelName}'

describe('${pluralCamelName}', () => {
  scenario('returns all ${pluralCamelName}', async (scenario) => {
    const result = await ${pluralCamelName}()

    expect(result.length).toEqual(Object.keys(scenario.${singularCamelName}).length)
  })<% if (crud) { %>

  scenario('returns a single ${singularCamelName}', async (scenario) => {
    const result = await ${singularCamelName}({ id: scenario.${singularCamelName}.one.id })

    expect(result).toEqual(scenario.${singularCamelName}.one)
  })

  scenario('creates a ${singularCamelName}', async (scenario) => {
    const result = await create${singularPascalName}({
      input: {
        name: 'String',
        body: 'String',
        postId: scenario.${singularCamelName}.one.post.id,
      },
    })

    expect(result.name).toEqual('String')
    expect(result.body).toEqual('String')
  })

  scenario('updates a ${singularCamelName}', async (scenario) => {<% rand = parseInt(Math.random() * 10000000) %>
    const original = await ${singularCamelName}({ id: scenario.${singularCamelName}.one.id })
    const result = await update${singularPascalName}({
      id: original.id,
      input: { name: 'String${rand}' },
    })

    expect(result.name).toEqual('String${rand}')
  })

  scenario('deletes a ${singularCamelName}', async (scenario) => {
    const original = await delete${singularPascalName}({ id: scenario.${singularCamelName}.one.id })
    const result = await ${singularCamelName}({ id: original.id })

    expect(result).toEqual(null)
  })<% } %>
})
