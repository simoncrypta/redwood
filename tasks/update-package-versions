#!/usr/bin/env node

const child = require('child_process')
const fs = require('fs')
const path = require('path')

const version = process.argv[2]
if (!version) {
  console.error(
    'You must supply a version.\nUsage ./update-package-versions [version]'
  )
  process.exit(1)
}

/**
 * Iterates over Redwood dependencies in package.json files and updates the version.
 */
const updatePackageVersion = (pkgPath, version) => {
  const pkg = JSON.parse(
    fs.readFileSync(path.join(pkgPath, 'package.json'), 'utf-8')
  )

  if (pkg.dependencies) {
    for (const depName of Object.keys(pkg.dependencies).filter((x) =>
      x.startsWith('@redwoodjs/')
    )) {
      console.log(` - ${depName}: ${pkg.dependencies[depName]} => ^${version}`)
      pkg.dependencies[depName] = `^${version}`
    }
  }
  if (pkg.devDependencies) {
    for (const depName of Object.keys(pkg.devDependencies).filter((x) =>
      x.startsWith('@redwoodjs/')
    )) {
      console.log(
        ` - ${depName}: ${pkg.devDependencies[depName]} => ^${version}`
      )
      pkg.devDependencies[depName] = `^${version}`
    }
  }

  fs.writeFileSync(
    path.join(pkgPath, 'package.json'),
    JSON.stringify(pkg, undefined, 2)
  )
}

const cwd = path.join(__dirname, '../')
const cmd = [
  'yarn lerna version',
  version,
  '--force-publish',
  '--no-push',
  '--no-git-tag-version',
  '--yes',
].join(' ')

console.log(`Running ${cmd}...`)
child.execSync(cmd, {
  cwd,
  stdio: 'inherit',
})
console.log()

console.log('Updating template...')
console.log('Changes: ')
const templatePath = path.join(cwd, 'packages/create-redwood-app/template')
updatePackageVersion(templatePath, version)
updatePackageVersion(path.join(templatePath, 'api'), version)
updatePackageVersion(path.join(templatePath, 'web'), version)
console.log()
console.log(`All done! You are now ready to publish ${version}.`)
console.log()
